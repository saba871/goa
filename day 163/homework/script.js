const http = require("http");
const fs = require("fs");

const htmlContent = fs.readFileSync("./index.html", "utf-8");
const second = fs.readFileSync("./second.html", "utf-8");

const server = http.createServer((req, res) => {
    if (req.url == "/" || req.url == "/home") {
        res.end(htmlContent);
        return;
    } else if (req.url == "/register") {
        res.end(second);
        return;
    }
    res.end("This page does not exsist");
});

server.listen(3000);

// Server — ეს არის სერვერი, რომელიც "ისმენს" შემომავალ კავშირებს და პასუხობს მათ.
// ანუ, როცა ბრაუზერიდან მოთხოვნას ვაგზავნით (მაგ: ვწერთ მისამართს და Enter-ს ვაწვებით),
// სწორედ სერვერი იღებს ამ მოთხოვნას და პასუხობს შესაბამისი კონტენტით.

// Request (მოთხოვნა) — ეს არის ინფორმაცია, რომელსაც მომხმარებელი აგზავნის სერვერზე.
// მაგალითად: "მომეცი ეს გვერდი", "გადამინახე ეს ინფორმაცია", ან "წამაკითხე ეს ფაილი".

// Response (პასუხი) — ეს არის ის, რასაც სერვერი აბრუნებს მოთხოვნაზე.
// მაგალითად: HTML ფაილი, ტექსტი, JSON მონაცემები ან ნებისმიერი სხვა კონტენტი.

// http module — ეს არის Node.js-ის შიდა მოდული,
// რომელიც საშუალებას გვაძლევს სერვერი შევქმნათ და მასზე request/response ლოგიკა დავაწესოთ.
// ანუ მის გარეშე სერვერს ვერ ავაწყობთ.

// res.end() — ეს მეთოდი ამთავრებს response-ს გაგზავნას.
// მაგალითად, როცა სერვერმა დაამზადა პასუხი და უკვე მზად არის, რომ მომხმარებელს გაუგზავნოს,
// მაშინ ვიყენებთ res.end("შეიძლება ტექსტიც მივაწოდოთ").
// მას რომ არ გამოვიძახებთ, პასუხი "გაყინული" დარჩება და ბრაუზერი არაფერს აჩვენებს.
